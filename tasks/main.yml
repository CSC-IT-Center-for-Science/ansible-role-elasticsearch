---
# Elasticsearch Ansible Tasks
#
# Check if data dir exists
#
- name: Does data dir exist?
  stat: path={{ elasticsearch_data_dir }}
  register: p

- name: Display p
  debug: var=p verbosity=1

# Configure directories
- name: Configuring directories (the next few tasks)
  file: path={{ elasticsearch_log_dir }} state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes
  when: elasticsearch_log_dir is defined

- name: create data dir only if it does not exist
  file: path={{ elasticsearch_data_dir }} state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes
  when: elasticsearch_data_dir is defined and p.stat.exists == false

- name: create work dir
  file: path={{ elasticsearch_work_dir }} state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes
  when: elasticsearch_work_dir is defined
- name: create conf dir
  file: path={{ elasticsearch_conf_dir }} state=directory owner=root group={{ elasticsearch_group }} recurse=yes
  when: elasticsearch_conf_dir is defined
- name: create plugin dir
  file: path={{ elasticsearch_plugin_dir }} state=absent
  when: elasticsearch_plugin_dir is defined and install_es_plugins == "yes"
- name: create plugin dir recurse permissions
  file: path={{ elasticsearch_plugin_dir }} state=directory owner=root group={{ elasticsearch_group }} recurse=yes
  when: elasticsearch_plugin_dir is defined
- name: create backup dir
  file: path={{ elasticsearch_backup_dir }} state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes
  when: elasticsearch_backup_dir is defined


# Configure Elasticsearch Node
- name: Configuring template elasticsearch.yml Elasticsearch Node
  template: src=elasticsearch_csc.yml.j2 dest={{ elasticsearch_conf_dir }}/elasticsearch.yml owner={{ elasticsearch_user }} group={{ elasticsearch_group }} mode=0644 backup=yes
  when: elasticsearch_conf_dir is defined and elasticsearch_install_version != "2.x" and elasticsearch_install_version != "5.x"
  tags: elasticsearch
  notify:
    - restart elasticsearch

- name: Configuring template elasticsearch.yml Elasticsearch Node 2.x
  template: src=elasticsearch_csc_2.x.yml.j2 dest={{ elasticsearch_conf_dir }}/elasticsearch.yml owner={{ elasticsearch_user }} group={{ elasticsearch_group }} mode=0644 backup=yes
  when: elasticsearch_conf_dir is defined and elasticsearch_install_version == "2.x"
  tags: elasticsearch
  notify:
    - restart elasticsearch

- name: Configuring template elasticsearch.yml Elasticsearch Node 5.x
  template: src=elasticsearch_csc_5.x.yml.j2 dest={{ elasticsearch_conf_dir }}/elasticsearch.yml owner=root group={{ elasticsearch_group }} mode=0644 backup=yes
  when: elasticsearch_conf_dir is defined and elasticsearch_install_version == "5.x"
  tags: elasticsearch
  notify:
    - restart elasticsearch

- name: Configuring template jvm.options file for Elasticsearch 5.x
  template: src=jvm.options.j2 dest={{ elasticsearch_conf_dir }}/jvm.options owner=root group={{ elasticsearch_group }} mode=0644 backup=yes
  when: elasticsearch_conf_dir is defined and elasticsearch_install_version == "5.x"
  tags: elasticsearch
  notify:
    - restart elasticsearch

- name: template in sysconfig/elasticsearch
  template: src=elasticsearch_csc.default.j2 dest=/etc/sysconfig/elasticsearch owner=root group={{ elasticsearch_group }} mode=0644 backup=yes
  notify:
    - restart elasticsearch

# Install Other Generic Plugins
- include: plugins.yml
  when: (elasticsearch_plugins is defined and elasticsearch_install_version != "2.x" and elasticsearch_install_version != "5.x" )

- include: plugins2x.yml
  when: (elasticsearch_plugins is defined and elasticsearch_install_version == "2.x")

# Install Marvel Plugin
#- include: marvel.yml
#  when: (elasticsearch_plugin_marvel_version is defined)

# Register Elasticsearch service to start on boot
- name: Ensure Elasticsearch is started on boot
  service: name=elasticsearch enabled={{ elasticsearch_service_startonboot }}

# flush handlers - elasticsearch needs to be up before other roles which depend on it, like kibana/logstash
- meta: flush_handlers

